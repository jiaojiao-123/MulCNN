def traindata(data_name = train_name):
    label_list = []
    feature_list = []
    feature_sequence = []
    bridge = []
    for num in range(len(data_name)):
        expression = pd.read_csv(data_name[0], header=None)
        label = []
        label = expression[1]
        label = np.array(label)
        label = label[1:]
        bridge = pd.read_csv(bridge_name[0],header=None)
        bridge = np.array(bridge)
        temp = []
        for i in range(len(label)):
            for j in range(bridge.shape[1]):
                if label[i] == bridge[0][j]:
                    temp.append(bridge[1][j])
        label = np.array(temp)
        label = to_categorical(label, num_classes= label_num+1)
        label = np.delete(label, 0, axis=1)
        for i in range(len(label)):
            temp = []
            for j in range(len(label[i])):
                temp.append(int(label[i][j]))
            label_list.append(temp)
        label_list = np.array(label_list)

        expression = np.array(expression)
        expression = expression[1:,2:expression.shape[1]-1]
        expression = np.array(expression)
        for i in range(len(expression)):
            temp = []
            for j in range(len(expression[i])):
                temp.append(float(expression[i][j]))
            feature_list.append(temp)
        feature_list = np.array(feature_list)

        for i in range(feature_list.shape[0]):
            for j in range(feature_list.shape[1]):
                if feature_list[i][j] != 0:
                    feature_list[i][j] = np.log2((feature_list[i][j]*1000000)/feature_list.shape[1])

        for i in range(1, feature_list.shape[0] + 1):
            temp = list(feature_list[i - 1])
            temp = temp + [0] * ((sequence_length * sequence_length) - len(feature_list[i - 1]))
            temp = np.array(temp)
            temp = temp.reshape((sequence_length, sequence_length, 1))
            feature_sequence.append(temp)
        feature_sequence = np.array(feature_sequence)

        return feature_sequence,label_list,feature_list
train = traindata()
